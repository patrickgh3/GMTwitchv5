<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// It's recommended to have one dedicated Twitch object like this one to keep all Twitch variables and logic organized.

tw_init() // Call this in the create event of your Twitch object.

tw_load_config('twitchconfig.txt') /* Sets variables from config file so credentials aren't embedded directly in code. (good practice)
To get an Oauth token, see http://twitchapps.com/tmi/
To get a Client ID, see https://dev.twitch.tv/docs/v5/guides/using-the-twitch-api/
I have put the config file in C:/Users/me/AppData/Local/Mygamename/twitchconfig.txt. The file format is:
botusername
oauth:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
clientidclientidclientid
*/

// These example variables are not requied but you may find them useful.
examplechannel = 'cwpbot'
exampleuserid = ''
exampleviewers = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send stream request

// https://dev.twitch.tv/docs/v5/reference/streams/#get-stream-by-user
streamReq = tw_api_request('/streams/'+exampleuserid)

alarm[0] = 30*room_speed // Currently it appears are no hard rate limits, but be smart about your requests.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(ord('C')) {
    tw_irc_connect(ircusername, ircpassword, examplechannel) // Connect to chat. You may do this in the create event or wherever else if you like.
}

if keyboard_check_pressed(ord('D')) {
    tw_irc_disconnect() // Disconnect from chat. If you're quitting the game, you don't need to call this.
}

if ircconnected { // ircconnected tells you whether you're currently connected to chat or not.
    window_set_caption('Connected')
}
else {
    window_set_caption('Not connected')
}
window_set_caption(window_get_caption()+' Viewers: '+string(exampleviewers))

// To make API requests, supply the part of the URL after "kraken", and save the resulting HTTP request ID for use in the HTTP event.
// Note that TwitchGM isn't limited to certain API requests. Just suppy the URL and navigate the resulting JSON yourself!
// The list of API requests can be found at https://dev.twitch.tv/docs/

if keyboard_check_pressed(ord('U')) {
    // Request user ID from username, since most API calls go by user ID, not username.
    // https://dev.twitch.tv/docs/v5/guides/using-the-twitch-api/#translating-from-user-names-to-user-ids
    userIdReq = tw_api_request('/users?login='+examplechannel)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if tw_irc_networking_message() { // Behind-the-scenes handling of network traffic. Returns true if a Twitch chat message was just received and parsed, else false.

    /* At this point the following variables are set:
    displayname     Twitch display name with customized capital letters and Japanese characters, string
    msg             Chat message, string
    color           GameMaker color of the user, real
    moderator       True if user is a mod, else false, real
    subscriber      True if user is a sub, else false, real
    turbo           True if user has turbo, else false, real
    sender          "Actual" Twitch username with all lowercase English characters, string
    */
    background_color = color
    show_debug_message(displayname+' : '+msg)
    
    if msg == '!hi' {
        tw_irc_send_message('hi '+displayname) // Sends a chat message. Note message limits stated at https://dev.twitch.tv/docs/v5/guides/irc/#irc-command-and-message-limits
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if tw_api_response() { // Behind-the-scenes handling of HTTP responses. Returns true if just received and prepared Twitch HTTP responnse, else false. Note that this swallows errors.

    /* At this point the following variables are set:
    requestid   The HTTP request ID, real
    jsonmap     The JSON response content, ds_map
    */
    if requestid == userIdReq { // Compare with the value we saved when we made the request
        // Now we explore the ds_map representing the response JSON.
        // https://dev.twitch.tv/docs/v5/guides/using-the-twitch-api/#translating-from-user-names-to-user-ids
        var total = jsonmap[? '_total']
        if total != 0 {
            var usersList = jsonmap[? 'users']
            var user = usersList[| 0]
            exampleuserid = user[? '_id'];
            alarm[0] = 1 // Send stream request now that we just received the user id
            show_debug_message('Received user id '+exampleuserid+', starting viewers refreshing')
        }
    }
    else if requestid == streamReq {
        // https://dev.twitch.tv/docs/v5/reference/streams/#get-stream-by-user
        var stream = jsonmap[? 'stream']
        if is_undefined(stream) { // json value is null
            viewers = -1 // as specified in the docs, stream is not live, so handle that case
        }
        else {
            exampleviewers = stream[? 'viewers']
        }
    }
}
tw_api_response_cleanup() // Cleans up parsing data. Don't forget to call this at the end or you'll have a memory leak.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
